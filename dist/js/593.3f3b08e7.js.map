{"version":3,"file":"js/593.3f3b08e7.js","mappings":"gLACO,MAAMA,UAAsB,KAC/BC,cACIC,SAASC,WACTC,KAAKC,yBAA2B,qBACpC,CACAC,gBAAgBC,GACZ,MAAMC,QAAoBJ,KAAKK,eAAeF,GAC9C,IAAKC,EACD,MAAM,IAAIE,MAAMN,KAAKC,0BAEzB,MAAMM,EAAS,CACXC,MAAO,IAEX,IAAK,MAAMC,KAAcL,EAAa,CAClC,MAAMM,EAAO,CACTC,KAAMF,EACNG,WAAYH,EAAWI,aACvBC,SAAUd,KAAKe,mBAAmBN,GAClCO,KAAMhB,KAAKiB,eAAeR,GAC1BS,UAAMC,EACNC,KAAMpB,KAAKqB,eAAeZ,KAEd,OAAZN,QAAgC,IAAZA,OAAqB,EAASA,EAAQmB,YAC1DZ,EAAKa,WAAavB,KAAKwB,gBAAgBf,IAE3CF,EAAOC,MAAMiB,KAAKf,EACtB,CACA,OAAOH,CACX,CACAL,iBAAiBwB,GACb,MAAM1B,KAAK2B,cAAc,0BAC7B,CACAzB,gBAAgBwB,GACZ,MAAM1B,KAAK2B,cAAc,0BAC7B,CACAzB,iBAAiBwB,GACb,MAAM1B,KAAK2B,cAAc,0BAC7B,CACAzB,qBAAqBC,GACjB,IAAIyB,EACJ,MAAMC,GAAqF,QAA1ED,EAAiB,OAAZzB,QAAgC,IAAZA,OAAqB,EAASA,EAAQ2B,aAA0B,IAAPF,OAAgB,EAASA,EAAGG,KAAK,OAAS,GACvIC,KAA0B,OAAZ7B,QAAgC,IAAZA,OAAqB,EAASA,EAAQ6B,UAC9E,OAAO,IAAIC,SAAQC,IACf,IAAIC,GAAgB,EACpB,MAAMC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,KAAO,OACbH,EAAMP,OAASA,EACfO,EAAMJ,SAAWA,EACjBI,EAAMI,iBAAiB,UAAU,KAC7BL,GAAgB,EAChB,MAAM3B,EAAQiC,MAAMC,KAAKN,EAAM5B,OAAS,IACxC0B,EAAQ1B,EAAM,GACf,CAAEmC,MAAM,IAEXC,OAAOJ,iBAAiB,SAAStC,gBACvBF,KAAK6C,KAAK,KACZV,GAGJD,OAAQf,EAAU,GACnB,CAAEwB,MAAM,IACXP,EAAMU,OAAO,GAErB,CACA5C,sBAAsBQ,GAClB,OAAO,IAAIuB,SAAQ,CAACC,EAASa,KACzB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcxC,GACrBsC,EAAOG,OAAS,KACZ,MAAM5C,EAAkC,kBAAlByC,EAAOzC,OAAsByC,EAAOzC,OAAS,GAC7D6C,EAAiB7C,EAAO8C,MAAM,WAC9BC,EAASF,EAAe,IAAM,GACpClB,EAAQoB,EAAO,EAEnBN,EAAOO,QAAUC,IACbT,EAAOS,EAAM,CAChB,GAET,CACAvC,eAAeP,GACX,OAAOA,EAAKM,IAChB,CACAD,mBAAmBL,GACf,OAAOA,EAAK6B,IAChB,CACAlB,eAAeX,GACX,OAAOA,EAAKU,IAChB,CACAlB,WAAWuD,GACP,OAAO,IAAIxB,SAAQC,GAAWwB,WAAWxB,EAASuB,IACtD,E","sources":["webpack://spotter/./node_modules/@capawesome/capacitor-file-picker/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class FilePickerWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.ERROR_PICK_FILE_CANCELED = 'pickFiles canceled.';\n    }\n    async pickFiles(options) {\n        const pickedFiles = await this.openFilePicker(options);\n        if (!pickedFiles) {\n            throw new Error(this.ERROR_PICK_FILE_CANCELED);\n        }\n        const result = {\n            files: [],\n        };\n        for (const pickedFile of pickedFiles) {\n            const file = {\n                blob: pickedFile,\n                modifiedAt: pickedFile.lastModified,\n                mimeType: this.getMimeTypeFromUrl(pickedFile),\n                name: this.getNameFromUrl(pickedFile),\n                path: undefined,\n                size: this.getSizeFromUrl(pickedFile),\n            };\n            if (options === null || options === void 0 ? void 0 : options.readData) {\n                file.data = await this.getDataFromFile(pickedFile);\n            }\n            result.files.push(file);\n        }\n        return result;\n    }\n    async pickImages(_options) {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async pickMedia(_options) {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async pickVideos(_options) {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async openFilePicker(options) {\n        var _a;\n        const accept = ((_a = options === null || options === void 0 ? void 0 : options.types) === null || _a === void 0 ? void 0 : _a.join(',')) || '';\n        const multiple = !!(options === null || options === void 0 ? void 0 : options.multiple);\n        return new Promise(resolve => {\n            let onChangeFired = false;\n            const input = document.createElement('input');\n            input.type = 'file';\n            input.accept = accept;\n            input.multiple = multiple;\n            input.addEventListener('change', () => {\n                onChangeFired = true;\n                const files = Array.from(input.files || []);\n                resolve(files);\n            }, { once: true });\n            // Workaround to detect when Cancel is selected in the File Selection dialog box.\n            window.addEventListener('focus', async () => {\n                await this.wait(1000);\n                if (onChangeFired) {\n                    return;\n                }\n                resolve(undefined);\n            }, { once: true });\n            input.click();\n        });\n    }\n    async getDataFromFile(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => {\n                const result = typeof reader.result === 'string' ? reader.result : '';\n                const splittedResult = result.split('base64,');\n                const base64 = splittedResult[1] || '';\n                resolve(base64);\n            };\n            reader.onerror = error => {\n                reject(error);\n            };\n        });\n    }\n    getNameFromUrl(file) {\n        return file.name;\n    }\n    getMimeTypeFromUrl(file) {\n        return file.type;\n    }\n    getSizeFromUrl(file) {\n        return file.size;\n    }\n    async wait(delayMs) {\n        return new Promise(resolve => setTimeout(resolve, delayMs));\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":["FilePickerWeb","constructor","super","arguments","this","ERROR_PICK_FILE_CANCELED","async","options","pickedFiles","openFilePicker","Error","result","files","pickedFile","file","blob","modifiedAt","lastModified","mimeType","getMimeTypeFromUrl","name","getNameFromUrl","path","undefined","size","getSizeFromUrl","readData","data","getDataFromFile","push","_options","unimplemented","_a","accept","types","join","multiple","Promise","resolve","onChangeFired","input","document","createElement","type","addEventListener","Array","from","once","window","wait","click","reject","reader","FileReader","readAsDataURL","onload","splittedResult","split","base64","onerror","error","delayMs","setTimeout"],"sourceRoot":""}